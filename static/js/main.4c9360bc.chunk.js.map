{"version":3,"sources":["serviceWorker.js","constants.js","reducers.js","components/Card.tsx","components/CardList.tsx","components/SearchBox.tsx","components/Scroll.tsx","App.js","actions.js","index.tsx"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","initialStateSearch","searchField","initialStateRequest","robots","isPending","err","Card","name","email","id","className","alt","src","CardList","map","user","index","key","SearchBox","searchChange","type","placeholder","onChange","aria-label","Scroll","props","style","overflowY","border","height","children","App","this","onRequestRobots","onSearchChange","filteredRobots","filter","robot","toLowerCase","includes","Component","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","response","json","data","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.4c9360bc.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING'\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS'\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED'","import { \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED,\r\n} from './constants.js';\r\n\r\nconst initialStateSearch = {\r\n    searchField : ''\r\n}\r\n\r\nexport const searchRobots = (state = initialStateSearch,action = {}) => {\r\n    switch(action.type){\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({} , state , { searchField: action.payload })\r\n            // return { ...state , { searchfield: action.payload })\r\n        default: \r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nconst initialStateRequest = {\r\n    robots: [],\r\n    isPending: false,\r\n    err: ''\r\n}\r\n\r\nexport const requestRobots = (state = initialStateRequest,action ={}) => {\r\n    switch(action.type){\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, { isPending: true });\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, { robots: action.payload, isPending: false });\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, { err: action.payload, isPending: false });\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from \"react\";\r\n\r\ninterface IRobot {\r\n  id: number;\r\n  name: string;\r\n  email: string;\r\n}\r\n\r\nconst Card: React.SFC<IRobot> = ({ name, email, id }) => {\r\n  return (\r\n    <div className=\"tc bg-light-green dib dim br3 pa3 ma2 grow bw2 shadow-5\">\r\n      <img alt=\"robots\" src={`https://robohash.org/${id}?size=200x200`} />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\ninterface IRobot {\r\n  id: number;\r\n  name: string;\r\n  email: string;\r\n}\r\n\r\nconst CardList = ({ robots }: { robots: Array<IRobot> }) => {\r\n  return (\r\n    <div>\r\n      {robots.map((user, index) => {\r\n        return (\r\n          <Card\r\n            key={robots[index].id}\r\n            id={robots[index].id}\r\n            name={robots[index].name}\r\n            email={robots[index].email}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardList;\r\n","import React from \"react\";\r\n\r\ninterface ISearchBoxProps {\r\n  searchChange(event: React.SyntheticEvent<HTMLInputElement>): void;\r\n}\r\n\r\nconst SearchBox = ({ searchChange }: ISearchBoxProps) => {\r\n  return (\r\n    <div className=\"pa2\">\r\n      <input\r\n        className=\"pa3 ba b--green bg-lightest-blue\"\r\n        type=\"search\"\r\n        placeholder=\"Search Robots\"\r\n        onChange={searchChange}\r\n        aria-label=\"Search Robots\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React from \"react\";\r\n\r\ntype props = {\r\n  children?: JSX.Element;\r\n};\r\nconst Scroll = (props: props) => {\r\n  return (\r\n    <div\r\n      style={{\r\n        overflowY: \"scroll\",\r\n        border: \"1px solid black\",\r\n        height: \"500px\",\r\n      }}\r\n    >\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport CardList from \"./components/CardList\";\r\nimport SearchBox from \"./components/SearchBox\";\r\nimport Scroll from \"./components/Scroll\";\r\nimport \"./App.css\";\r\nimport { setSearchField, requestRobots } from \"./actions\";\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    searchField: state.searchRobots.searchField,\r\n    robots: state.requestRobots.robots,\r\n    isPending: state.requestRobots.isPending,\r\n    err: state.requestRobots.err,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: () => dispatch(requestRobots()),\r\n  };\r\n};\r\n\r\nclass App extends Component {\r\n  componentDidMount() {\r\n    this.props.onRequestRobots();\r\n  }\r\n\r\n  render() {\r\n    const { robots, searchField, isPending, onSearchChange } = this.props;\r\n    const filteredRobots = robots.filter((robot) => {\r\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n    });\r\n    return isPending ? (\r\n      <div className=\"tc ma7\">\r\n        <h1>LOADING...</h1>\r\n      </div>\r\n    ) : (\r\n      <div className=\"tc\">\r\n        <h1 className=\"f1\">Robots</h1>\r\n        <SearchBox searchChange={onSearchChange} />\r\n        <Scroll>\r\n          <CardList robots={filteredRobots} />\r\n        </Scroll>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED,\r\n} from \"./constants.js\";\r\n\r\nexport const setSearchField = (text) => ({\r\n  type: CHANGE_SEARCH_FIELD,\r\n  payload: text,\r\n});\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n    .then((response) => response.json())\r\n    .then((data) => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n    .catch((err) => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: err }));\r\n};\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\r\nimport { createLogger } from \"redux-logger\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport \"./index.css\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { searchRobots, requestRobots } from \"./reducers\";\r\nimport \"tachyons\";\r\nimport App from \"./App\";\r\n\r\nconst logger = createLogger();\r\n\r\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\r\nconst store = createStore(\r\n  rootReducer,\r\n  applyMiddleware(thunkMiddleware, logger)\r\n);\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\") as HTMLElement\r\n);\r\n\r\nserviceWorker.register();\r\n"],"sourceRoot":""}