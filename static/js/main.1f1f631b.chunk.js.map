{"version":3,"sources":["serviceWorker.js","constants.js","reducers.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","App.js","actions.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","initialStateSearch","searchField","initialStateRequest","robots","isPending","err","Card","name","email","id","className","alt","src","CardList","Robots","map","user","index","key","SearchBox","searchChange","type","placeholder","onChange","label","Scroll","props","style","overflowY","border","height","children","App","this","onRequestRobots","onSearchChange","filteredRobots","filter","robot","toLowerCase","includes","Component","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","response","json","data","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.1f1f631b.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING'\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS'\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED'","import { \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED,\r\n} from './constants.js';\r\n\r\nconst initialStateSearch = {\r\n    searchField : ''\r\n}\r\n\r\nexport const searchRobots = (state = initialStateSearch,action = {}) => {\r\n    switch(action.type){\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({} , state , { searchField: action.payload })\r\n            // return { ...state , { searchfield: action.payload })\r\n        default: \r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nconst initialStateRequest = {\r\n    robots: [],\r\n    isPending: false,\r\n    err: ''\r\n}\r\n\r\nexport const requestRobots = (state = initialStateRequest,action ={}) => {\r\n    switch(action.type){\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, { isPending: true });\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, { robots: action.payload, isPending: false });\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, { err: action.payload, isPending: false });\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n\treturn (\r\n\t\t<div className='tc bg-light-green dib dim br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t\t<img alt='robots' src={`https://robohash.org/${id}?size=300x300`}></img>\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card'\r\n\r\nconst CardList = ({ Robots }) => {\r\n\treturn(\r\n\t\t<div>\r\n\t\t{\r\n\t\t\tRobots.map((user, index) => {\r\n\t\t\t\treturn (\r\n\t\t\t\t<Card \r\n\t\t\t\t\tkey={Robots[index].id}\r\n\t\t\t\t\tid={Robots[index].id}\r\n\t\t\t\t\tname={Robots[index].name} \r\n\t\t\t\t\temail={Robots[index].email}\r\n\t\t\t\t/>\r\n\t\t\t);\r\n\t\t\t})\r\n\t\t}\r\n\t</div> \r\n\t);\r\n} \r\n\r\nexport default CardList;","import React from \"react\";\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n  return (\r\n    <div className=\"pa2\">\r\n      <input\r\n        className=\"pa3 ba b--green bg-lightest-blue\"\r\n        type=\"search\"\r\n        placeholder=\"Search Robots\"\r\n        onChange={searchChange}\r\n        label=\"search robots\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React from 'react';\r\n\r\nconst Scroll = ( props ) => {\r\n\treturn (\r\n\t\t<div style={{ overflowY: 'scroll', border: '1px solid black', height: '500px' }} >\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux'\r\nimport CardList from './components/CardList.js';\r\nimport SearchBox from './components/SearchBox';\r\nimport Scroll from './components/Scroll';\r\nimport './App.css';\r\nimport { setSearchField, requestRobots } from './actions'\r\n\r\nconst mapStateToProps = (state) => {\r\n\treturn {\r\n\t\tsearchField: state.searchRobots.searchField,\r\n\t\trobots: state.requestRobots.robots,\r\n\t\tisPending: state.requestRobots.isPending,\r\n\t\terr: state.requestRobots.err\r\n\t}\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\tonSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n\t\tonRequestRobots: () => dispatch(requestRobots())\r\n\t}\r\n}\r\n\r\nclass App extends Component {\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.props.onRequestRobots();\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { robots,searchField,isPending,onSearchChange } = this.props\r\n\t\tconst filteredRobots = robots.filter(robot => {\r\n\t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n\t\t})\r\n\t\treturn isPending\r\n\t\t?\t<div className='tc ma7'>\r\n\t\t\t\t<h1>LOADING...</h1>\r\n\t\t\t</div>\r\n\t\t:\t<div className='tc'>\r\n\t\t\t\t<h1 className='f1'>Robots</h1>\r\n\t\t\t\t<SearchBox searchChange={onSearchChange} />\r\n\t\t\t\t<Scroll>\r\n\t\t\t\t\t<CardList Robots={filteredRobots}/>\r\n\t\t\t\t</Scroll>\r\n\t\t\t</div>\r\n\t}\r\n}\r\n\t\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(App);","import { \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED,\r\n} from './constants.js';\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response => response.json())\r\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n    .catch(err => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: err})) \r\n}","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport { createLogger } from \"redux-logger\";\nimport thunkMiddleware from \"redux-thunk\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { searchRobots, requestRobots } from \"./reducers\";\nimport \"tachyons\";\nimport App from \"./App\";\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(thunkMiddleware, logger)\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.register();\n"],"sourceRoot":""}